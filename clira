#!/usr/bin/env python

import click
import os
import toml
import sys
import requests
import json
from requests.auth import HTTPBasicAuth


class CliraConfig(object):
    def __init__(self):
        try:
            clirarc_path = os.path.join(os.environ['HOME'], '.clirarc')
            with open(clirarc_path) as clirarc:
                config = toml.loads(clirarc.read())
                self.config = config

                self.auth = HTTPBasicAuth(
                    config['username'],
                    config['password'])

                self.jira_base_url = config['jira-instance-url']
                self.default_project_key = config.get(
                    'default-project-key',
                    None)

        except IOError:
            print 'You need to create a .clirarc file in your home directory'
            sys.exit(1)


def generate_issue_url(base_url, issue_key):
    return '%s/browse/%s' % (base_url, issue_key)


@click.group()
@click.pass_context
def cli(ctx):
    ctx.obj = CliraConfig()


@click.command()
@click.pass_obj
def show_config(clira_config):
    for key, value in clira_config.config.items():
        print key, value


@click.command()
@click.pass_obj
def list_projects(clira_config):
    projects_api_endpoint = clira_config.jira_base_url + '/rest/api/2/project'
    response = requests.get(projects_api_endpoint, auth=clira_config.auth)
    for project in response.json():
        print '%s: %s' % (project['key'], project['name'])


@click.command()
@click.pass_obj
@click.argument('issue_type', nargs=1, required=True)
@click.argument('summary', nargs=1, required=True)
@click.argument('description', nargs=1, default='[BLANK]')
@click.option('--project', default=None)
def create_issue(clira_config, issue_type, summary, description, project):
    issues_api_endpoint = clira_config.jira_base_url + '/rest/api/2/issue'
    project_key = clira_config.config.get('default-project-key')
    if project:
        project_key = project
    elif not project_key:
        project_key = click.prompt('Enter a project key')

    payload = {
        'fields': {
            'project': {'key': project_key},
            'summary': summary,
            'issuetype': {'name': issue_type},
            'description': description,
            'labels': ["clira"]
        }
    }
    headers = headers = {'content-type': 'application/json'}
    json_payload = json.dumps(payload)
    response = requests.post(
        issues_api_endpoint,
        data=json_payload,
        headers=headers,
        auth=clira_config.auth)
    issue_key = response.json()['key']

    print 'Issue %s created. View it at %s' % (
        issue_key,
        generate_issue_url(clira_config.jira_base_url, issue_key))


@click.command()
@click.pass_obj
@click.argument('issue', nargs=1)
@click.argument('comment', nargs=1)
def comment_on_issue(clira_config, issue, comment):
    api_endpoint = clira_config.jira_base_url + '/rest/api/2/issue/' + issue + '/comment'
    payload = {
        'body': comment,
    }
    headers = headers = {'content-type': 'application/json'}
    json_payload = json.dumps(payload)

    response = requests.post(
        api_endpoint,
        data=json_payload,
        headers=headers,
        auth=clira_config.auth)
    print response.status_code
    print response.text

cli.add_command(show_config, name='show-config')
cli.add_command(list_projects, name='list-projects')
cli.add_command(create_issue, name='create')
cli.add_command(comment_on_issue, name='comment')

if __name__ == '__main__':
    cli()
